name: CI
on:
  push:
    branches:
      - master
  pull_request:
    types:
      - opened
      - synchronize
jobs:
  cabal:
    name: ${{ matrix.os }} / cabal ghc ${{ matrix.ghc }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        cabal: ["3.4"]
        ghc: ["8.10.5"]
    steps:
      - uses: actions/checkout@v2
      - uses: haskell/actions/setup@v1.2
        id: setup-haskell-cabal
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: ${{ matrix.cabal }}
      - run: cabal v1-install --reinstall --force-reinstalls --enable-shared text transformers mtl parsec hashable unordered-containers ghc-paths
      - run: python3 --version
      - run: ghc --version
      - run: ghc -dynamic-too -shared -fPIC Test.hs -no-link
      - run: python3 hyphen/build-extn.py --dynamic
      - run: python3 hyphen_examples_full.py
# Test that the signal mode fancy stuff works (and that we get the expected behaviour with it disabled)
      - run: python3 test_tools/interrupting_after.py 30 python3 test_tools/test_expecting_interruption.py python 40 0 33
      - run: python3 test_tools/interrupting_after.py 30 python3 test_tools/test_expecting_interruption.py haskell 40 0 33
      - run: python3 test_tools/interrupting_after.py 30 python3 test_tools/test_expecting_interruption.py lazy 40 31 100
      - run: python3 test_tools/interrupting_after.py 30 python3 test_tools/test_ei_with_nuisance_threads.py python 5 40 0 33
      - run: python3 test_tools/interrupting_after.py 30 python3 test_tools/test_ei_with_nuisance_threads.py haskell 5 40 0 33
# Test that releasing the GIL works (and that we get the expected behavior with it disabled)
      - run: python3 test_tools/test_GIL_release.py fancy 5 5 5 12.5
      - run: python3 test_tools/test_GIL_release.py lazy 5 5 24 100
# Now test everything that still makes sense without the threaded Haskell rts
      - run: python3 hyphen/build-extn.py --dynamic --not-threaded
      - run: python3 hyphen_examples_full.py
  stack:
    name: ${{ matrix.os }} / stack ${{ matrix.resolver }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest,macos-latest]
        stack: ["2.3.1"]
# GHC version here doesn't really matter because stack picks one from the LTS
        bootstrap_ghc: ["8.10.5"]
        resolver: ["lts-16.31", "lts-18.28", "lts-19.6"] # GHC 8.8, 8.10, 9.0
        exclude:
          - os: macos-latest
            resolver: "lts-19.6" # This resolver seems buggy on MacOS
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-haskell@v1.1.4
        id: setup-haskell-stack
        with:
          ghc-version: ${{ matrix.bootstrap_ghc }}
          stack-version: ${{ matrix.stack }}
          stack-no-global: True
          enable-stack: True
      - if: matrix.os == 'ubuntu-latest'
        run: echo "arch_flag=--arch x86_64" >> $GITHUB_ENV
      - if: matrix.os == 'macos-latest'
        run: echo "arch_flag=" >> $GITHUB_ENV
      - run: stack ${{ env.arch_flag }} --resolver ${{ matrix.resolver }} build
      - run: stack ${{ env.arch_flag }} --resolver ${{ matrix.resolver }} exec -- python3 --version
      - run: stack ${{ env.arch_flag }} --resolver ${{ matrix.resolver }} exec -- ghc --version
      - run: stack ${{ env.arch_flag }} --resolver ${{ matrix.resolver }} exec -- ghc -dynamic-too -shared -fPIC Test.hs -no-link
      - run: stack ${{ env.arch_flag }} --resolver ${{ matrix.resolver }} exec -- python3 hyphen/build-extn.py --dynamic
      - run: stack ${{ env.arch_flag }} --resolver ${{ matrix.resolver }} exec -- python3 hyphen_examples_full.py
# Test that the signal mode fancy stuff works (and that we get the expected behaviour with it disabled)
      - run: stack ${{ env.arch_flag }} --resolver ${{ matrix.resolver }} exec -- python3 test_tools/interrupting_after.py 30 python3 test_tools/test_expecting_interruption.py python 40 0 33
      - run: stack ${{ env.arch_flag }} --resolver ${{ matrix.resolver }} exec -- python3 test_tools/interrupting_after.py 30 python3 test_tools/test_expecting_interruption.py haskell 40 0 33
      - run: stack ${{ env.arch_flag }} --resolver ${{ matrix.resolver }} exec -- python3 test_tools/interrupting_after.py 30 python3 test_tools/test_expecting_interruption.py lazy 40 31 100
      - run: stack ${{ env.arch_flag }} --resolver ${{ matrix.resolver }} exec -- python3 test_tools/interrupting_after.py 30 python3 test_tools/test_ei_with_nuisance_threads.py python 5 40 0 33
      - run: stack ${{ env.arch_flag }} --resolver ${{ matrix.resolver }} exec -- python3 test_tools/interrupting_after.py 30 python3 test_tools/test_ei_with_nuisance_threads.py haskell 5 40 0 33
# Test that releasing the GIL works (and that we get the expected behavior with it disabled)
      - if: matrix.os == 'ubuntu-latest'
        run: stack ${{ env.arch_flag }} --resolver ${{ matrix.resolver }} exec -- python3 test_tools/test_GIL_release.py fancy 5 5 5 12.5
      - if: matrix.os == 'ubuntu-latest'
        run: stack ${{ env.arch_flag }} --resolver ${{ matrix.resolver }} exec -- python3 test_tools/test_GIL_release.py lazy 5 5 24 100
# Now test everything that still makes sense without the threaded Haskell rts
      - run: stack ${{ env.arch_flag }} --resolver ${{ matrix.resolver }} exec -- python3 hyphen/build-extn.py --dynamic --not-threaded
      - run: stack ${{ env.arch_flag }} --resolver ${{ matrix.resolver }} exec -- python3 hyphen_examples_full.py
  stack-win:
    name: ${{ matrix.os }} / stack ${{ matrix.resolver }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        stack: ["2.3.1"]
# GHC version here doesn't really matter because stack picks one from the LTS
        bootstrap_ghc: ["8.10.5"]
        resolver: ["lts-12.9"]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
           python-version: '3.x'
           architecture: 'x86'
      - uses: actions/setup-haskell@v1.1.4
        id: setup-haskell-stack
        with:
          ghc-version: ${{ matrix.bootstrap_ghc }}
          stack-version: ${{ matrix.stack }}
          stack-no-global: True
          enable-stack: True
# Building on x86_64 with m2w64 seems to tickle a ghc bug (see eg ghc
# trac #14576) Can't build without m2w64 on windows 64 bit with python
# 3.5 or later.  So don't bother to test these configurations for now.
# FWIW, hyphen has been tested with python 3.4 on 64-bit windows a
# while ago and that worked, but it involved messing with gendef.exe,
# and is only a solution for this fairly old python version anyway,
# and so I don't really have the energy to automate it in CI	  
      - run: stack --arch i386 --resolver ${{ matrix.resolver }} build
      - run: stack --arch i386 --resolver ${{ matrix.resolver }} exec -- python3 --version
      - run: stack --arch i386 --resolver ${{ matrix.resolver }} exec -- ghc --version
      - run: stack --arch i386 --resolver ${{ matrix.resolver }} exec -- ghc -shared -fPIC Test.hs -no-link
      - run: stack --arch i386 --resolver ${{ matrix.resolver }} exec -- python3 hyphen/build-extn.py
      - run: stack --arch i386 --resolver ${{ matrix.resolver }} exec -- python3 hyphen_examples_full.py
# Test that releasing the GIL works (and that we get the expected behavior with it disabled)
      - run: stack --arch i386 --resolver ${{ matrix.resolver }} exec -- python3 test_tools/test_GIL_release.py fancy 5 5 5 12.5
      - run: stack --arch i386 --resolver ${{ matrix.resolver }} exec -- python3 test_tools/test_GIL_release.py lazy 5 5 24 100
# Now test everything that still makes sense without the threaded Haskell rts
      - run: stack --arch i386 --resolver ${{ matrix.resolver }} exec -- python3 hyphen/build-extn.py --not-threaded
      - run: stack --arch i386 --resolver ${{ matrix.resolver }} exec -- python3 hyphen_examples_full.py
